// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package infracli_db

import (
	"context"
	"database/sql"
)

const createDnsRecord = `-- name: CreateDnsRecord :one
INSERT OR REPLACE INTO dns_records (record_uid, zone_uid, name, content, type_id, modified, created, ttl)
VALUES(?, ?, ?, ?, ?, ?, ?, ?) ON CONFLICT (record_uid) DO 
UPDATE SET 
zone_uid = excluded.zone_uid,
name = excluded.name,
content = excluded.content,
type_id = excluded.type_id,
modified = excluded.modified,
created = excluded.created,
ttl = excluded.ttl
RETURNING id, record_uid
`

type CreateDnsRecordParams struct {
	RecordUid string
	ZoneUid   string
	Name      string
	Content   sql.NullString
	TypeID    int64
	Modified  sql.NullString
	Created   sql.NullString
	Ttl       int64
}

type CreateDnsRecordRow struct {
	ID        int64
	RecordUid string
}

func (q *Queries) CreateDnsRecord(ctx context.Context, arg CreateDnsRecordParams) (CreateDnsRecordRow, error) {
	row := q.db.QueryRowContext(ctx, createDnsRecord,
		arg.RecordUid,
		arg.ZoneUid,
		arg.Name,
		arg.Content,
		arg.TypeID,
		arg.Modified,
		arg.Created,
		arg.Ttl,
	)
	var i CreateDnsRecordRow
	err := row.Scan(&i.ID, &i.RecordUid)
	return i, err
}

const createDnsZone = `-- name: CreateDnsZone :exec
INSERT INTO dns_zones (zone_uid, domain_name) VALUES(?, ?)
ON CONFLICT (zone_uid) DO UPDATE SET domain_name = excluded.domain_name
`

type CreateDnsZoneParams struct {
	ZoneUid    string
	DomainName string
}

func (q *Queries) CreateDnsZone(ctx context.Context, arg CreateDnsZoneParams) error {
	_, err := q.db.ExecContext(ctx, createDnsZone, arg.ZoneUid, arg.DomainName)
	return err
}

const createRecordComment = `-- name: CreateRecordComment :exec
INSERT OR REPLACE INTO record_comments (record_id, comment) VALUES(?, ?)
`

type CreateRecordCommentParams struct {
	RecordID int64
	Comment  sql.NullString
}

func (q *Queries) CreateRecordComment(ctx context.Context, arg CreateRecordCommentParams) error {
	_, err := q.db.ExecContext(ctx, createRecordComment, arg.RecordID, arg.Comment)
	return err
}

const createRecordTag = `-- name: CreateRecordTag :exec
INSERT OR REPLACE INTO record_tags (record_id, tags) VALUES(?, ?)
`

type CreateRecordTagParams struct {
	RecordID int64
	Tags     sql.NullString
}

func (q *Queries) CreateRecordTag(ctx context.Context, arg CreateRecordTagParams) error {
	_, err := q.db.ExecContext(ctx, createRecordTag, arg.RecordID, arg.Tags)
	return err
}

const deleteRecordByRecordUid = `-- name: DeleteRecordByRecordUid :exec
DELETE FROM dns_records WHERE record_uid = ?
`

func (q *Queries) DeleteRecordByRecordUid(ctx context.Context, recordUid string) error {
	_, err := q.db.ExecContext(ctx, deleteRecordByRecordUid, recordUid)
	return err
}

const deleteRecordByZoneId = `-- name: DeleteRecordByZoneId :exec
DELETE FROM dns_records WHERE zone_uid = ?
`

func (q *Queries) DeleteRecordByZoneId(ctx context.Context, zoneUid string) error {
	_, err := q.db.ExecContext(ctx, deleteRecordByZoneId, zoneUid)
	return err
}

const getRecordIdByRecordUid = `-- name: GetRecordIdByRecordUid :one
SELECT id FROM dns_records WHERE record_uid = ? LIMIT 1
`

func (q *Queries) GetRecordIdByRecordUid(ctx context.Context, recordUid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getRecordIdByRecordUid, recordUid)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getRecordsByZoneId = `-- name: GetRecordsByZoneId :many
SELECT 
    r.id,
    r.record_uid,
    r.zone_uid,
    r.type_id, 
    r.ttl, 
    r.created, 
    r.modified
FROM dns_records r 
LEFT JOIN record_comments c ON r.id = c.record_id
LEFT JOIN record_tags t ON r.id = t.record_id
WHERE r.zone_uid = ?
`

type GetRecordsByZoneIdRow struct {
	ID        int64
	RecordUid string
	ZoneUid   string
	TypeID    int64
	Ttl       int64
	Created   sql.NullString
	Modified  sql.NullString
}

func (q *Queries) GetRecordsByZoneId(ctx context.Context, zoneUid string) ([]GetRecordsByZoneIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecordsByZoneId, zoneUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecordsByZoneIdRow
	for rows.Next() {
		var i GetRecordsByZoneIdRow
		if err := rows.Scan(
			&i.ID,
			&i.RecordUid,
			&i.ZoneUid,
			&i.TypeID,
			&i.Ttl,
			&i.Created,
			&i.Modified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getZoneIdByDomainName = `-- name: GetZoneIdByDomainName :one
SELECT zone_uid FROM dns_zones WHERE domain_name = ? LIMIT 1
`

func (q *Queries) GetZoneIdByDomainName(ctx context.Context, domainName string) (string, error) {
	row := q.db.QueryRowContext(ctx, getZoneIdByDomainName, domainName)
	var zone_uid string
	err := row.Scan(&zone_uid)
	return zone_uid, err
}

const getZoneIdByZoneUid = `-- name: GetZoneIdByZoneUid :one
SELECT id FROM dns_zones WHERE zone_uid = ? LIMIT 1
`

func (q *Queries) GetZoneIdByZoneUid(ctx context.Context, zoneUid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getZoneIdByZoneUid, zoneUid)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getZonesFromDb = `-- name: GetZonesFromDb :many
SELECT id, zone_uid, domain_name FROM dns_zones
ORDER BY id
`

func (q *Queries) GetZonesFromDb(ctx context.Context) ([]DnsZone, error) {
	rows, err := q.db.QueryContext(ctx, getZonesFromDb)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DnsZone
	for rows.Next() {
		var i DnsZone
		if err := rows.Scan(&i.ID, &i.ZoneUid, &i.DomainName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDnsRecordByRecordUid = `-- name: UpdateDnsRecordByRecordUid :one
UPDATE dns_records
SET name = ?,
    content = ?,
    type_id = ?,
    ttl = ?,
    modified = datetime()
WHERE record_uid = ?
RETURNING id, record_uid, zone_uid, type_id, name, content, ttl, created, modified
`

type UpdateDnsRecordByRecordUidParams struct {
	Name      string
	Content   sql.NullString
	TypeID    int64
	Ttl       int64
	RecordUid string
}

func (q *Queries) UpdateDnsRecordByRecordUid(ctx context.Context, arg UpdateDnsRecordByRecordUidParams) (DnsRecord, error) {
	row := q.db.QueryRowContext(ctx, updateDnsRecordByRecordUid,
		arg.Name,
		arg.Content,
		arg.TypeID,
		arg.Ttl,
		arg.RecordUid,
	)
	var i DnsRecord
	err := row.Scan(
		&i.ID,
		&i.RecordUid,
		&i.ZoneUid,
		&i.TypeID,
		&i.Name,
		&i.Content,
		&i.Ttl,
		&i.Created,
		&i.Modified,
	)
	return i, err
}

const updateDnsRecordContentByRecordUid = `-- name: UpdateDnsRecordContentByRecordUid :one
UPDATE dns_records
SET content = ?,
    modified = datetime()
WHERE record_uid = ?
RETURNING id, record_uid, zone_uid, type_id, name, content, ttl, created, modified
`

type UpdateDnsRecordContentByRecordUidParams struct {
	Content   sql.NullString
	RecordUid string
}

func (q *Queries) UpdateDnsRecordContentByRecordUid(ctx context.Context, arg UpdateDnsRecordContentByRecordUidParams) (DnsRecord, error) {
	row := q.db.QueryRowContext(ctx, updateDnsRecordContentByRecordUid, arg.Content, arg.RecordUid)
	var i DnsRecord
	err := row.Scan(
		&i.ID,
		&i.RecordUid,
		&i.ZoneUid,
		&i.TypeID,
		&i.Name,
		&i.Content,
		&i.Ttl,
		&i.Created,
		&i.Modified,
	)
	return i, err
}

const updateDnsRecordNameByRecordUid = `-- name: UpdateDnsRecordNameByRecordUid :one
UPDATE dns_records
SET name = ?,
    modified = datetime()
WHERE record_uid = ?
RETURNING id, record_uid, zone_uid, type_id, name, content, ttl, created, modified
`

type UpdateDnsRecordNameByRecordUidParams struct {
	Name      string
	RecordUid string
}

func (q *Queries) UpdateDnsRecordNameByRecordUid(ctx context.Context, arg UpdateDnsRecordNameByRecordUidParams) (DnsRecord, error) {
	row := q.db.QueryRowContext(ctx, updateDnsRecordNameByRecordUid, arg.Name, arg.RecordUid)
	var i DnsRecord
	err := row.Scan(
		&i.ID,
		&i.RecordUid,
		&i.ZoneUid,
		&i.TypeID,
		&i.Name,
		&i.Content,
		&i.Ttl,
		&i.Created,
		&i.Modified,
	)
	return i, err
}

const updateDnsRecordTtlByRecordUid = `-- name: UpdateDnsRecordTtlByRecordUid :one
UPDATE dns_records
SET ttl = ?,
    modified = datetime()
WHERE record_uid = ?
RETURNING id, record_uid, zone_uid, type_id, name, content, ttl, created, modified
`

type UpdateDnsRecordTtlByRecordUidParams struct {
	Ttl       int64
	RecordUid string
}

func (q *Queries) UpdateDnsRecordTtlByRecordUid(ctx context.Context, arg UpdateDnsRecordTtlByRecordUidParams) (DnsRecord, error) {
	row := q.db.QueryRowContext(ctx, updateDnsRecordTtlByRecordUid, arg.Ttl, arg.RecordUid)
	var i DnsRecord
	err := row.Scan(
		&i.ID,
		&i.RecordUid,
		&i.ZoneUid,
		&i.TypeID,
		&i.Name,
		&i.Content,
		&i.Ttl,
		&i.Created,
		&i.Modified,
	)
	return i, err
}

const updateDnsRecordTypeIdByRecordUid = `-- name: UpdateDnsRecordTypeIdByRecordUid :one
UPDATE dns_records
SET type_id = ?,
    modified = datetime()
WHERE record_uid = ?
RETURNING id, record_uid, zone_uid, type_id, name, content, ttl, created, modified
`

type UpdateDnsRecordTypeIdByRecordUidParams struct {
	TypeID    int64
	RecordUid string
}

func (q *Queries) UpdateDnsRecordTypeIdByRecordUid(ctx context.Context, arg UpdateDnsRecordTypeIdByRecordUidParams) (DnsRecord, error) {
	row := q.db.QueryRowContext(ctx, updateDnsRecordTypeIdByRecordUid, arg.TypeID, arg.RecordUid)
	var i DnsRecord
	err := row.Scan(
		&i.ID,
		&i.RecordUid,
		&i.ZoneUid,
		&i.TypeID,
		&i.Name,
		&i.Content,
		&i.Ttl,
		&i.Created,
		&i.Modified,
	)
	return i, err
}
